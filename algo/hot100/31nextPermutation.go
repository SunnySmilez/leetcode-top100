package hot100

/*
31. 下一个排列:https://leetcode-cn.com/problems/next-permutation/
实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列（即，组合出下一个更大的整数）。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须 原地 修改，只允许使用额外常数空间。

示例 1：
输入：nums = [1,2,3]
输出：[1,3,2]

示例 2：
输入：nums = [3,2,1]
输出：[1,2,3]

示例 3：
输入：nums = [1,1,5]
输出：[1,5,1]

示例 4：
输入：nums = [1]
输出：[1]
*/
//思路：
// 首先将高位的和低位的进行调换（低位必须大于高位）；123=>132
// 高位的数尽可能靠近右边，也就是低位；低位的数也要尽可能的小
// 最后交换位置后的后半部分还要进行重新排序，保证是换位后最小的一种情况
// 452631 用3和2换位得到453621；再进行重新排序453126

//官方解释：
// 我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。
//同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，「较大数」右边的数需要按照升序重新排列。这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。
//以排列 [4,5,2,6,3,1][4,5,2,6,3,1] 为例：
//我们能找到的符合条件的一对「较小数」与「较大数」的组合为 22 与 33，满足「较小数」尽量靠右，而「较大数」尽可能小。
//当我们完成交换后排列变为 [4,5,3,6,2,1][4,5,3,6,2,1]，此时我们可以重排「较小数」右边的序列，序列变为 [4,5,3,1,2,6][4,5,3,1,2,6]
func NextPermutation(nums []int) {

}
